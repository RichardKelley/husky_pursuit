<?xml version="1.0"?>
<!-- 
Ajay jain
July 14, 2014
ARSENL Lab, Naval Postgraduate School

roslaunch husky_pursuit robot.launch \
	own_num:=0 \
	target_num:=1 \


	linear_vel_max:=0.1 \
	angular_vel_max:=0.1 \
	<seek/flee/wander/serpentine>:=true (false by default)
-->
<launch>
	<arg name="own_num" default="0" />
	<arg name="target_num" default="1" />
	<arg name="machine" default="robot_$(arg own_num)" />

	<group ns="robot_$(arg own_num)">
		<node machine="$(arg machine)" name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true">
			<param name="tf_prefix" value="robot_$(arg own_num)" />
		</node>

		#### For wheel transforms for rviz
		<!-- <node machine="$(arg machine)" name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" /> -->

		#### husky base launch ###########
		<include file="$(find husky_pursuit)/launch/game/base.launch">
			<arg name="port" value="/dev/ttyUSB0" />
			<arg name="machine" value="$(arg machine)" />
		</include>

		#### hokuyo launch ###########
		<node machine="$(arg machine)" name="hokuyo" pkg="hokuyo_node" type="hokuyo_node" respawn="true" output="screen">
			<param name="port" type="string" value="/dev/ttyACM0"/> 
			<param name="intensity" type="bool" value="true"/>
			<!-- <param name="frame_id" value="robot_$(arg own_num)/base_footprint_front_bumper_part"/> -->
			<param name="frame_id" value="robot_$(arg own_num)/laser"/>
		</node>

		#### publish a base_link -> laser transform ###########
  		<node machine="$(arg machine)" pkg="tf" type="static_transform_publisher" name="base_link_to_laser" args="0.25 0 0.25 0 0 0 /robot_$(arg own_num)/base_link /robot_$(arg own_num)/laser 40" respawn="true"/>
  		<!-- <node pkg="tf" type="static_transform_publisher" name="odom_footprint_link" args="0 0 0 0 0 0 /robot_$(arg own_num)/odom /robot_$(arg own_num)/base_footprint 40" /> -->

		#### relay encoder to odom, prefixing frame ids ###########
		<node machine="$(arg machine)" name="encoder_frame_remapper" type="encoder_frame_remapper.py" pkg="husky_pursuit" respawn="true">
			<param name="frame_prefix" value="robot_$(arg own_num)/" />
		</node>

		<node machine="$(arg machine)" pkg="robot_pose_ekf" type="robot_pose_ekf" name="robot_pose_ekf" respawn="true">
			<remap from="odom" to="encoder" />
			<rosparam>
                freq: 10.0
                sensor_timeout: 1.0
                publish_tf: true
                odom_used: true
                vo_used: false
                imu_used: false
                sensor_timeout: 5
            </rosparam>
           	<param name="output_frame" value="odom_combined" />
           	<param name="tf_prefix" value="robot_$(arg own_num)" />
	    </node>

		<!-- <node pkg="laser_scan_matcher" type="laser_scan_matcher_node" 
		    name="laser_scan_matcher_node" output="screen">

		    <remap from="odom" to="encoder"/>
		    <remap from="vel" to="husky/cmd_vel"/>
		    # Use odometry and a constant velocity model only (no IMU)
		    <param name="use_imu" value="false"/>
		    <param name="use_vel" value="true"/>

		    <param name="fixed_frame" value="robot_$(arg own_num)/world" />  # Default: world
		    <param name="base_frame" value="robot_$(arg own_num)/odom"/>  # Default: base_link
		    <param name="publish_tf" value="true"/>    # Default: true
		    <param name="max_iterations" value="10"/>

		</node> -->

		<!-- <node machine="$(arg machine)" name="camera" pkg="usb_cam" type="usb_cam_node">
			<param name="video_device" value="/dev/video0" />
			<param name="image_width" value="1280" />
			<param name="image_height" value="720" />
			<param name="pixel_format" value="yuyv" />
			<param name="camera_frame_id" value="webcam" />
		</node> -->
	</group>
</launch>
